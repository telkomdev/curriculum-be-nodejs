openapi: 3.0.0
info:
  description: "In this application, we create Ticketing API microservice that have feature user management, route management, booking management. This ticketing app developed by using stack NodeJS, Express, JWT,
    MongoDB."
  version: 1.0.0
  title: 110-Ticketing App Microservice
tags:
  - name: root
    description: "Request to root URL"
  - name: user
    description: "User operation: Create User, Create User Admin, Auth / Login, Get
      Users, Update Users, Get my profile, Find Users, Delete User"
  - name: route
    description: "Route operation: import data route, create new route, find route,
      edit route <br> <a href=\"https://drive.google.com/file/d/1AgnUVeIVSIVM9QkFJbuEDUyMdOh-HIs1/view?usp=sharing\"> Ticket Data CSV </a>"
  - name: booking
    description: "Booking operation: Create new booking, generate ticket, find bookings, completed
      booking, cancel booking"
servers:
  - url: http://localhost:10081
  - url: http://localhost:10082
  - url: http://localhost:10083
paths:
  /:
    get:
      tags:
        - root
      summary: Request directly to root URL
      description: ""
      responses:
        "200":
          description: Success
          content:
            application/json: 
              schema: 
                $ref: "#/components/schemas/root"
  /api/v1/user/create/admin:
    post:
      tags: 
        - user
      summary: Create new user admin, need super admin secret key 
      description: ""
      operationId: "createAdmin"
      parameters:
      - in: header  
        name: secret-key
        required: true 
        description: Your super admin secret-key
        schema:
          type: string
      requestBody:
        content:  
          application/json:
            schema:
              $ref: "#/components/schemas/createNewAdmin"
        description: "User email, user name and password to register"
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewUserSuccess"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewUserErrorEmail"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/noSecretKey"
  /api/v1/user/auth:
    post:
      tags:
        - user
      summary: Login user 
      description: ""
      operationId: "loginUser"
      requestBody:
        content:  
          application/json:
            schema:
              $ref: "#/components/schemas/loginUser"
        description: "User email, and password to login"
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginSuccess"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorLogin"
  /api/v1/user/create:
    post:
      tags: 
        - user
      summary: Create new user, need role admin bearer token
      description: ""
      operationId: "createUser"
      security:
        - bearerAuth: []
      requestBody:
        content:  
          application/json:
            schema:
              $ref: "#/components/schemas/createNewUser"
        description: "User email, user name and password to register"
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewUserSuccess"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewUserErrorEmail"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/noTokenProvided"
  /api/v1/user/me:
    get:
      tags: 
        - user
      summary: Get current login user profile
      description: ""
      operationId: "getMe"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getMe"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/noTokenProvided"
  /api/v1/user:
    get:
      tags:
        - user
      summary: Get all user and search all user by name, this endpoint only available for role admin
      description: ""
      operationId: "findAll"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          required: false
          description: "String query to search filter by name "
          schema:
            type: string
      responses:
        "200":
          description: Success
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/findAll"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  "/api/v1/user/{id}":
    get:
      tags:
        - user
      summary: Find user by id, this feature need role admin
      description: ""
      operationId: findUserById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: User id to search
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findById-success"
        "404":
          description: Not Found
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/userNotFound"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
    put:
      tags:
        - user
      summary: Update user by id, this feature need Role Admin
      description: ""
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: User id to update
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserById"
        description: Object that need to be update
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateUserSuccess"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateUserError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
    delete:
      tags:
        - user
      summary: Delete user by id, this endpoint need Role Admin
      description: ""
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: User id to delete
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteUserSuccess"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteUserError"
        "401":
          description: Failed unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  /api/v1/route/import:
    post:
      tags: 
        - route
      summary: Import Ticketing Route CSV file to App server, this feature only accessible by role admin.  
      description: ""
      operationId: "routeImport"
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                routeFile:
                  type: string
                  format: binary
        description: CSV route file to import
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/importFileSuccess"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/noFileError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/requiredAdminRoleError"
                  - $ref: "#/components/schemas/noTokenProvided"
  /api/v1/route:
    post:
      tags:
        - route 
      summary: Create new route, this feature need Role Admin
      description: ""
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createNewRoute"
        description: Object from, to, price, departureTime are required
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewRouteSuccess"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/newRouteError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/requiredAdminRoleError"
                  - $ref: "#/components/schemas/noTokenProvided"
    get:
      tags:
        - route
      summary: Find all route, or find route with filter by from location or to location
      description: ""
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          required: false
          description: 'String query to search filter by "from" location '
          schema:
            type: string
        - in: query
          name: to
          required: false
          description: 'String query to search filter by "to" location '
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findAllRouteSuccess"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/noTokenProvided"
  /api/v1/route/{id}:
    get:
      tags:
        - route
      summary: Get route by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Route id to find
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findRouteSuccess"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/routeNotFoundError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/noTokenProvided"
    put:
      tags:
        - route
      summary: Update route by ID
      description: Field to update from (optional), to (optional), price (optional)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Route id to update
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createNewRoute"
        description: Object from (optional), to (optional), price (optional), departureTime (optional)
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateRouteSuccess"
        "404":
          description: Not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/updateRouteNotFoundError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/requiredAdminRoleError"
                  - $ref: "#/components/schemas/noTokenProvided"
  /api/v1/booking:
    post:
      tags:
        - booking
      summary: Create new booking
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createNewBooking"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createNewBookingSuccess"
        "401":
          description: Unauthorized Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "500":
          description: Create booking failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createBookingFailed"
    get:
      tags:
        - booking
      summary: Get all bookings, this feature need Role Admin.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number to query default value is 1
          required: false
          schema:
            type: integer
        - in: query
          name: size
          description: Limit size per page default value is 5
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findAllBookingSuccess"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/requiredAdminRoleError"

        "401":
          description: Unauthorized Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  "/api/v1/booking/{id}":
    get:
      tags:
        - booking
      summary: Get booking by id.
      security:
        - headerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Booking id to show
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findBookingByIdSuccess"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findBookingByIdFailed"
  "/booking/complete":
    post:
      tags:
        - booking
      summary: Update payment status to 1 (completed), this feature need Role Admin
      description:  Update payment status to 1 (completed), this feature need Role Admin and only able to change payment status if existing booking payment status is 0 (Created)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/completeBooking"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/completeBookingSuccess"
        "404":
          description: Error complete booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/completeBookingFailed"
        "500":
          description: Error find booking by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findBookingByIdFailed"
  "/booking/cancel":
    post:
      tags:
        - booking
      summary: Update payment status to 2 (cancelled), this feature need Role Admin
      description:  Update payment status to 2 (cancelled), this feature need Role Admin and only able to change payment status if existing booking payment status is 0 (Created)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cancelBooking"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cancelBookingSuccess"
        "404":
          description: Error cancel booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cancelBookingFailed"
        "500":
          description: Error find booking by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/findBookingByIdFailed"

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    root:
      type: object
      properties: 
        message:
          type: string
          example: "This is ticketing app."
    createNewAdmin:
      type: object
      properties:
        email:
          type: string
          example: john.doe@email.com
        name: 
          type: string
          example: John Doe
        password:
          type: string
          example: 123456
    createNewUser:
      type: object
      properties:
        email:
          type: string
          example: testuser@email.com
        name: 
          type: string
          example: Test User
        password:
          type: string
          example: 123456
    createNewUserSuccess:
      type: object
      properties:
        message:
          type: string
          example: User was registered successfully!
    createNewUserErrorEmail:
      type: object
      properties:
        message:  
          type: string
          example: "user validation failed: email: Please enter a valid email"
    unauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorized!"
    noSecretKey:
      type: object
      properties:
        message:  
          type: string
          example: "No secret-key provided!"
    noTokenProvided:
      type: object
      properties:
        message:
          type: string
          example: "No token provided!"
    loginUser:
      type: object
      properties:
        email: 
          type: string
          example: john.doe@email.com
        password:
          type: string
          example: 123456
    loginSuccess:
      type: object
      properties:
        id:
          type: string
          example: "631ea538d576f4fa0533d27e"
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
        roles:
          type: object
          $ref: "#/components/schemas/roleAdmin"
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzMWVlNTk3M2RiNmViOTgyY2M3ZjUxMSIsInJvbGVzIjpbImFkbWluIl0sImlhdCI6MTY2Mjk2OTQ1NSwiZXhwIjoxNjYzMDU1ODU1fQ.JncDu01Afc8elXDZBZAz-AJjG5KeeyNMRqbpsBcl9Sk"
    roleAdmin:
      type: array
      items: 
        type: string
        example: admin
    roleUser:
      type: array
      items: 
        type: string
        example: user
    errorLogin:
      type: object
      properties:
        message: 
          type: string
          example: User Not Found!
    getMe: 
      type: object
      properties: 
        id:
          type: string
          example: 631ee5973db6eb982cc7f511
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
        roles:
          type: array
          items:
            type: string
            example: admin
    getAdmin:
      type: object
      properties: 
        id:
          type: string
          example: 631ee5973db6eb982cc7f511
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
        roles:
          type: array
          items:
            properties: 
              _id: 
                type: string
                example: 631ee58d3db6eb982cc7f50d
              name:
                type: string
                example: admin
        createdAt:
          type: string
          example: "2022-09-12T03:19:20.279Z"
        updatedAt:
          type: string
          example: "2022-09-12T03:19:20.315Z"
    findAll:
      type: object
      properties:
        success: 
          type: integer
          example: 1
        count:
          type: integer
          example: 2
        users:
          type: array
          items:
            $ref: '#/components/schemas/getAdmin'
          example:
            - id: 631ee5973db6eb982cc7f511
              name: John Doe
              email: john.doe@email.com
              roles: [{id: 631ee58d3db6eb982cc7f50d, name: admin}]
              createdAt: "2022-09-12T03:19:20.279Z"
              updatedAt: "2022-09-12T03:19:20.315Z"
            - id: 631ef2b8c317b521ed7c6de6
              name: Bruce Wayne
              email: bruce.wayne@email.com
              roles: [{id: 631ee58d3db6eb982cc7f50c, name: user}]
              createdAt: "2022-09-12T08:50:00.732Z"
              updatedAt: "2022-09-12T08:50:00.744Z"
    findById-success:
      type: object
      properties:
        id:
          type: string
          example: 631ef2b8c317b521ed7c6de6
        name:
          type: string
          example: Bruce Wayne
        email:
          type: string
          example: bruce.wayne@email.com
        roles:
          type: array
          items:
            properties: 
              _id: 
                type: string
                example: 631ee58d3db6eb982cc7f50c
              name:
                type: string
                example: user
        createdAt:
          type: string
          example: "2022-09-12T08:50:00.732Z"
        updatedAt:
          type: string
          example: "2022-09-12T08:50:00.744Z"
    userNotFound:
      type: object
      properties:
        message:
          type: string
          example: Error retrieving Users with id=631ef2b8c317b521ed7c6de6aa, maybe user was not found
    updateUserById:
      type: object
      properties:
        name:
          type: string
          example: Your edited name
    updateUserSuccess:
      type: object
      properties:
        message:
          type: string
          example: User was updated successfully.
    updateUserError:
      type: object
      properties:
        message:  
          type: string
          example: Error updating user with id=631ea95d0770f442fd692fa8aa
    deleteUserSuccess:
      type: object
      properties:
        message:
          type: string
          example: User with id 631ea95d0770f442fd692fa8 was deleted successfully!
    deleteUserError:
      type: object
      properties:
        message:  
          type: string
          example: Could not delete user with id=631ea95d0770f442fd692fa8aa
    noFileError:
      type: object
      properties:
        message:
          type: string
          example: "No files were uploaded!"
    importFileSuccess:
      type: object
      properties:
        message:  
          type: string
          example: Route data has successfully imported
    requiredAdminRoleError:
      type: object
      properties:
        message:
          type: string
          example: Require Admin Role!
    createNewRoute:
      type: object
      properties:
        from:
          type: string
          example: Malang
        to:
          type: string
          example: Jakarta
        price:
          type: integer
          example: 200000
        departureTime:
          type: string
          example: 09:00:00
    createNewRouteSuccess:
      type: object
      properties:
        from:
          type: string
          example: Malang
        to:
          type: string
          example: Jakarta
        price:
          type: integer
          example: 200000
        departureTime:
          type: string
          example: 09:00:00
        createdAt:
          type: string
          example: "2022-09-13T01:12:00.000Z"
        updatedAt:
          type: string
          example: "2022-09-13T01:12:00.000Z"
        id:
          type: string
          example: 631fd8dff7a9117a6a09de96
    newRouteError:
      type: object
      properties:
        message:
          type: string
          example: Field from, to, price, departureTime cannot be empty
    findAllRouteSuccess:
      type: object
      properties:
        status:
          type: integer
          example: 1
        count:
          type: integer
          example: 3
        routes:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
              to:
                type: string
              price:
                type: integer
              departureTime:  
                type: string
              createdAt:
                type: string
              updatedAt:
                type: string
              id:
                type: string
          example:
            - from: Jakarta
              to: Bandung
              price: 200000
              departureTime: 09:00:00
              createdAt: "2022-09-13T00:36:53.635Z"
              updatedAt: "2022-09-13T00:36:53.635Z"
              id: 631fd0a5c3b9ff7c80dcb499
            - from: Jakarta
              to: Semarang
              price: 200000
              departureTime: 10:00:00
              createdAt: "2022-09-13T00:36:53.648Z"
              updatedAt: "2022-09-13T00:36:53.648Z"
              id: 631fd0a5c3b9ff7c80dcb49a
            - from: Malang
              to: Jakarta
              price: 200000
              departureTime: 09:00:00
              createdAt: "2022-09-13T01:12:00.000Z"
              updatedAt: "2022-09-13T01:12:00.000Z"
              id: 631fd8dff7a9117a6a09de96
    findRouteSuccess:
      type: object
      properties:
        from:
          type: string
          example: Malang
        to:
          type: string
          example: Bandung
        price:
          type: integer
          example: 250000
        departureTime: 
          type: string
          example: 15:00:00
        createdAt:
          type: string
          example: "2022-09-13T00:44:20.383Z"
        updatedAt:
          type: string
          example: "2022-09-13T00:52:43.084Z"
        id:
          type: string
          example: 631fd2648547b98f23fd08ee
    updateRouteNotFoundError:
      type: object
      properties:
        message: 
          type: string
          example: "Cannot update route with id=631fd2648547b98f23fd08ea. Maybe route was not found!"
    routeNotFoundError:
      type: object
      properties:
        message: 
          type: string
          example: Not found route with id 631fd2648547b98f23fd08ea
    updateRouteSuccess:
      type: object
      properties:
        message: 
          type: string
          example: "Route was updated successfully."
    createNewBooking:
      type: object
      properties:
        routeId:
          type: string
          example: 632145b11a21e101d8d69d1c
        quantity:
          type: integer
          example: "2"
        scheduleDate:
          type: string
          example: "2022-10-01"
    createNewBookingSuccess:
      type: object
      properties:
        quantity:
          type: integer
          example: 2
        departureTime:
          type: string
          example: "2022-10-01T12:00:00.000Z"
        totalPrice:
          type: integer
          example: 500000
        paymentStatus:
          type: integer
          example: 0
        user:
          type: object
          properties:
            id: 
              type: string
              example: 632131ee55dfb08745d2250b
            name: 
              type: string
              example: Bruce Wayne
            email: 
              type: string
              example: bruce.wayne@email.com
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/ticket"
          example:
            - id: 632169497f0236bfb3e8fce0
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.766Z"
              updatedAt: "2022-09-14T05:40:25.766Z"
              price: 250000
            - id: 632169497f0236bfb3e8fce2
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.775Z"
              updatedAt: "2022-09-14T05:40:25.775Z"
              price: 250000
        createdAt:
          type: string
          example: '2022-08-27T04:57:23.180Z'
        updatedAt:
          type: string
          example: '2022-08-27T04:57:23.180Z'
        id:
          type: string
          example: 6309a433d9dfb245a59cb645
    ticket:
      type: object
      properties:
        id: 
          type: string
          example: 632169497f0236bfb3e8fce0
        from: 
          type: string
          example: Yogyakarta
        to:
          type: string
          example: Jakarta
        departureTime:  
          type: string
          example: "2022-10-01T12:00:00.000Z"
        price:  
          type: number
          example: 250000
        bookingId: 
          type: string
          example: 632169497f0236bfb3e8fcde
        userId: 
          type: string
          example: 632131ee55dfb08745d2250b
        createdAt:
          type: string
          example: "2022-09-14T05:40:25.766Z"
        updatedAt:
          type: string
          example: "2022-09-14T05:40:25.766Z"
    createBookingFailed:
      type: object
      properties:
        message:
          type: string
          example: Error when retrieving data route, maybe route with 632145b11a21e101d8d69d1 not found.
    findAllBookingSuccess:
      type: object
      properties:
        success:
          type: integer
          example: 1
        count:
          type: integer
          example: 5
        totalPages:
          type: integer
          example: 2
        currentPage:
          type: integer
          example: 2
        bookings:
          type: array
          items:
            type: object
            properties:
              quantity:
                type: integer
                example: 2
              departureTime:
                type: string
                example: "2022-10-01T12:00:00.000Z"
              totalPrice:
                type: integer
                example: 500000
              paymentStatus:
                type: integer
                example: 0
              user:
                type: object
                properties:
                  id: 
                    type: string
                    example: 632131ee55dfb08745d2250b
                  name: 
                    type: string
                    example: Bruce Wayne
                  email: 
                    type: string
                    example: bruce.wayne@email.com
              tickets:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"
                example:
                  - id: 632169497f0236bfb3e8fce0
                    from: Yogyakarta
                    to: Jakarta
                    departureTime: "2022-10-01T12:00:00.000Z"
                    bookingId: "632169497f0236bfb3e8fcde"
                    userId: "632131ee55dfb08745d2250b"
                    createdAt: "2022-09-14T05:40:25.766Z"
                    updatedAt: "2022-09-14T05:40:25.766Z"
                    price: 250000
                  - id: 632169497f0236bfb3e8fce2
                    from: Yogyakarta
                    to: Jakarta
                    departureTime: "2022-10-01T12:00:00.000Z"
                    bookingId: "632169497f0236bfb3e8fcde"
                    userId: "632131ee55dfb08745d2250b"
                    createdAt: "2022-09-14T05:40:25.775Z"
                    updatedAt: "2022-09-14T05:40:25.775Z"
                    price: 250000  
              createdAt:
                type: string
                example: "2022-09-14T05:40:25.760Z"
              updatedAt:
                type: string
                example: "2022-09-14T05:40:25.782Z"
              id:
                type: string
                example: "632169497f0236bfb3e8fcde"
    findBookingByIdSuccess:
      type: object
      properties:
        quantity:
          type: integer
          example: 2
        departureTime:
          type: string
          example: "2022-10-01T12:00:00.000Z"
        totalPrice:
          type: integer
          example: 500000
        paymentStatus:
          type: integer
          example: 0
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/ticket"
          example:
            - id: 632169497f0236bfb3e8fce0
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.766Z"
              updatedAt: "2022-09-14T05:40:25.766Z"
              price: 250000
            - id: 632169497f0236bfb3e8fce2
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.775Z"
              updatedAt: "2022-09-14T05:40:25.775Z"
              price: 250000
        user:
          type: object
          properties:
            id: 
              type: string
              example: 632131ee55dfb08745d2250b
            name: 
              type: string
              example: Bruce Wayne
            email: 
              type: string
              example: bruce.wayne@email.com
        createdAt:
          type: string
          example: "2022-09-14T05:40:25.760Z"
        updatedAt:
          type: string
          example: "2022-09-14T05:40:25.782Z"
        id:
          type: string
          example: "632169497f0236bfb3e8fcde"
    findBookingByIdFailed:
      type: object
      properties:
        message:
          type: string
          example: Error when retrieving bookings with id 632169497f0236bfb3e8fcd
    completeBooking:
      type: object
      properties:
        bookingId:
          type: string
          example: 632169497f0236bfb3e8fcde
    cancelBooking:
      type: object
      properties:
        bookingId:
          type: string
          example: 632169377f0236bfb3e8fcce
    completeBookingSuccess:
      type: object
      properties:
        user:
          type: object
          properties:
            id: 
              type: string
              example: 632131ee55dfb08745d2250b
            name: 
              type: string
              example: Bruce Wayne
            email: 
              type: string
              example: bruce.wayne@email.com
        quantity:
          type: integer
          example: 2
        departureTime:
          type: string
          example: "2022-10-01T12:00:00.000Z"
        totalPrice:
          type: integer
          example: 500000
        paymentStatus:
          type: integer
          example: 1
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/ticket"
          example:
            - id: 632169497f0236bfb3e8fce0
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.766Z"
              updatedAt: "2022-09-14T05:40:25.766Z"
              price: 250000
            - id: 632169497f0236bfb3e8fce2
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169497f0236bfb3e8fcde"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:25.775Z"
              updatedAt: "2022-09-14T05:40:25.775Z"
              price: 250000  
        createdAt:
          type: string
          example: "2022-09-14T05:40:25.760Z"
        updatedAt:
          type: string
          example: "2022-09-14T05:45:13.052Z"
        id:
          type: string
          example: 632169497f0236bfb3e8fcde
    cancelBookingSuccess:
      type: object
      properties:
        user:
          type: object
          properties:
            id: 
              type: string
              example: 6309beaf0e9d0b573f37ada3
            name: 
              type: string
              example: Bruce Wayne
            email: 
              type: string
              example: bruce.wayne@email.com
        quantity:
          type: integer
          example: 5
        departureTime:
          type: string
          example: "2022-10-01T12:00:00.000Z"
        totalPrice:
          type: integer
          example: 1250000
        paymentStatus:
          type: integer
          example: 2
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/ticket"
          example:
            - id: 632169377f0236bfb3e8fcd0
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169377f0236bfb3e8fcce"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:07.824Z"
              updatedAt: "2022-09-14T05:40:07.824Z"
              price: 250000
            - id: 632169377f0236bfb3e8fcd2
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169377f0236bfb3e8fcce"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:07.838Z"
              updatedAt: "2022-09-14T05:40:07.838Z"
              price: 250000  
            - id: 632169377f0236bfb3e8fcd4
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169377f0236bfb3e8fcce"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:07.824Z"
              updatedAt: "2022-09-14T05:40:07.824Z"
              price: 250000
            - id: 632169377f0236bfb3e8fcd6
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169377f0236bfb3e8fcce"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:07.856Z"
              updatedAt: "2022-09-14T05:40:07.856Z"
              price: 250000  
            - id: 632169377f0236bfb3e8fcd8
              from: Yogyakarta
              to: Jakarta
              departureTime: "2022-10-01T12:00:00.000Z"
              bookingId: "632169377f0236bfb3e8fcce"
              userId: "632131ee55dfb08745d2250b"
              createdAt: "2022-09-14T05:40:07.865Z"
              updatedAt: "2022-09-14T05:40:07.865Z"
              price: 250000  
        createdAt:
          type: string
          example: "2022-09-14T05:40:07.811Z"
        updatedAt:
          type: string
          example: "2022-09-14T05:47:59.098Z"
        id:
          type: string
          example: 632169377f0236bfb3e8fcce
    cancelBookingFailed:
      type: object
      properties:
        message:
          type: string
          example: Error, cancel payment only can be done when payment status is 0 (Created)
    completeBookingFailed:
      type: object
      properties:
        message:
          type: string
          example: Error, complete payment only can be done when payment status is 0 (Created)